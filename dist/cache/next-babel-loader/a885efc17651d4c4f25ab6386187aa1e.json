{"ast":null,"code":"import _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport axios from \"axios\";\nvar api = axios.create({\n  baseURL: process.env.NODE_ENV === \"production\" ? \"http://localhost:3001/api\" : \"http://localhost:3001/api\"\n});\napi.interceptors.request.use(function (config) {\n  var token = localStorage.getItem(\"accessKey\");\n\n  if (token) {\n    config.headers = {\n      Authorization: \"\".concat(token)\n    };\n  }\n\n  return config;\n});\napi.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.message === \"Network Error\") {\n    // The user doesn't have internet\n    return _Promise.reject(error);\n  }\n\n  switch (error.response.status) {\n    case 400:\n      break;\n\n    case 401:\n      // not logged in\n      if (window.location.pathname != \"/login\") {\n        window.location.replace(\"/login\");\n      }\n\n      break;\n\n    case 403:\n      // no access rights\n      break;\n\n    case 404:\n      break;\n\n    case 500:\n      break;\n\n    default:\n      // Unknown Error\n      break;\n  }\n\n  return _Promise.reject(error);\n});\nexport default api;","map":{"version":3,"sources":["C:/Users/OC Digital/Documents/Venture Cars/vc-web/api/index.js"],"names":["axios","api","create","baseURL","process","env","NODE_ENV","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","message","reject","status","window","location","pathname","replace"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;AACvBC,EAAAA,OAAO,EACLC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GACI,2BADJ,GAEI;AAJiB,CAAb,CAAZ;AAOAL,GAAG,CAACM,YAAJ,CAAiBC,OAAjB,CAAyBC,GAAzB,CAA6B,UAAAC,MAAM,EAAI;AACrC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACTD,IAAAA,MAAM,CAACI,OAAP,GAAiB;AAAEC,MAAAA,aAAa,YAAKJ,KAAL;AAAf,KAAjB;AACD;;AACD,SAAOD,MAAP;AACD,CAND;AAQAT,GAAG,CAACM,YAAJ,CAAiBS,QAAjB,CAA0BP,GAA1B,CACE,UAAAO,QAAQ,EAAI;AACV,SAAOA,QAAP;AACD,CAHH,EAIE,UAAAC,KAAK,EAAI;AACP,MAAIA,KAAK,CAACC,OAAN,KAAkB,eAAtB,EAAuC;AACrC;AACA,WAAO,SAAQC,MAAR,CAAeF,KAAf,CAAP;AACD;;AACD,UAAQA,KAAK,CAACD,QAAN,CAAeI,MAAvB;AACE,SAAK,GAAL;AACE;;AACF,SAAK,GAAL;AACE;AACA,UAAIC,MAAM,CAACC,QAAP,CAAgBC,QAAhB,IAA4B,QAAhC,EAA0C;AACxCF,QAAAA,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB,QAAxB;AACD;;AACD;;AACF,SAAK,GAAL;AACE;AACA;;AACF,SAAK,GAAL;AACE;;AACF,SAAK,GAAL;AACE;;AACF;AACE;AACA;AAlBJ;;AAoBA,SAAO,SAAQL,MAAR,CAAeF,KAAf,CAAP;AACD,CA9BH;AAiCA,eAAehB,GAAf","sourcesContent":["import axios from \"axios\";\r\n\r\nconst api = axios.create({\r\n  baseURL:\r\n    process.env.NODE_ENV === \"production\"\r\n      ? \"http://localhost:3001/api\"\r\n      : \"http://localhost:3001/api\"\r\n});\r\n\r\napi.interceptors.request.use(config => {\r\n  const token = localStorage.getItem(\"accessKey\");\r\n  if (token) {\r\n    config.headers = { Authorization: `${token}` };\r\n  }\r\n  return config;\r\n});\r\n\r\napi.interceptors.response.use(\r\n  response => {\r\n    return response;\r\n  },\r\n  error => {\r\n    if (error.message === \"Network Error\") {\r\n      // The user doesn't have internet\r\n      return Promise.reject(error);\r\n    }\r\n    switch (error.response.status) {\r\n      case 400:\r\n        break;\r\n      case 401:\r\n        // not logged in\r\n        if (window.location.pathname != \"/login\") {\r\n          window.location.replace(\"/login\");\r\n        }\r\n        break;\r\n      case 403:\r\n        // no access rights\r\n        break;\r\n      case 404:\r\n        break;\r\n      case 500:\r\n        break;\r\n      default:\r\n        // Unknown Error\r\n        break;\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default api;\r\n"]},"metadata":{},"sourceType":"module"}