{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport * as types from \"./ProductTypes\";\nimport * as actions from \"./ProductActions\";\nimport api from \"Api\"; //=========================\n// REQUESTS\n//=========================\n\nconst getProductModelDataRequest = async payload => {\n  const data = await api.get(`/categories/${payload.payload}`);\n  return data;\n};\n\nconst getProductGradesRequest = async payload => {\n  const data = await api.get(`/products/specificGrades/${payload.payload}`);\n  return data;\n};\n\nconst getProductGradeDataRequest = async payload => {\n  const exteriorData = await api.get(`/products/specificVariantExterior/${payload.payload}`);\n  const interiorData = await api.get(`/products/specificVariantInterior/${payload.payload}`);\n  const accessoriesData = await api.get(`/products/specificGradeProductOption/${payload.payload}`);\n  const data = {\n    exteriorData: exteriorData,\n    interiorData: interiorData,\n    accessoriesData: accessoriesData\n  };\n  return data;\n}; //=========================\n// CALL(GENERATOR) ACTIONS\n//=========================\n\n\nfunction* getProductModelData(e) {\n  try {\n    const data = yield call(getProductModelDataRequest, e);\n    yield put(actions.getProductModelDataSuccess(data));\n  } catch (error) {\n    yield put(actions.getProductModelDataFailure(data));\n    console.log(\"Error!\");\n  }\n}\n\nfunction* getProductGrades(e) {\n  try {\n    const data = yield call(getProductGradesRequest, e);\n    yield put(actions.getProductGradesSuccess(data));\n  } catch (error) {\n    yield put(actions.getProductGradesFailure(data));\n    console.log(\"Error!\");\n  }\n}\n\nfunction* getProductGradeData(e) {\n  try {\n    const data = yield call(getProductGradeDataRequest, e);\n    yield put(actions.getProductGradeDataSuccess(data));\n  } catch (error) {\n    yield put(actions.getProductGradeDataFailure(data));\n    console.log(\"Error!\");\n  }\n} //=======================\n// WATCHER FUNCTIONS\n//=======================\n\n\nexport function* getProductModelDataWatcher() {\n  yield takeEvery(types.GET_PRODUCT_MODEL_DATA, getProductModelData);\n}\nexport function* getProductGradesWatcher() {\n  yield takeEvery(types.GET_PRODUCT_GRADES, getProductGrades);\n}\nexport function* getProductGradeDataWatcher() {\n  yield takeEvery(types.GET_PRODUCT_GRADE_DATA, getProductGradeData);\n} //=======================\n// FORK SAGAS TO STORE\n//=======================\n\nexport default function* productSaga() {\n  yield all([fork(getProductModelDataWatcher), fork(getProductGradesWatcher), fork(getProductGradeDataWatcher)]);\n}","map":{"version":3,"sources":["C:/Users/LY/Desktop/vc-web/redux/ducks/product/ProductSaga.js"],"names":["all","call","fork","put","takeEvery","types","actions","api","getProductModelDataRequest","payload","data","get","getProductGradesRequest","getProductGradeDataRequest","exteriorData","interiorData","accessoriesData","getProductModelData","e","getProductModelDataSuccess","error","getProductModelDataFailure","console","log","getProductGrades","getProductGradesSuccess","getProductGradesFailure","getProductGradeData","getProductGradeDataSuccess","getProductGradeDataFailure","getProductModelDataWatcher","GET_PRODUCT_MODEL_DATA","getProductGradesWatcher","GET_PRODUCT_GRADES","getProductGradeDataWatcher","GET_PRODUCT_GRADE_DATA","productSaga"],"mappings":"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","sourcesContent":["import { \r\n  all, \r\n  call, \r\n  fork, \r\n  put, \r\n  takeEvery,\r\n} from \"redux-saga/effects\"\r\n\r\nimport * as types from \"./ProductTypes\"\r\nimport * as actions from \"./ProductActions\"\r\nimport api from \"Api\"\r\n\r\n//=========================\r\n// REQUESTS\r\n//=========================\r\nconst getProductModelDataRequest = async(payload) => {\r\n  const data = await api.get(`/categories/${payload.payload}`)\r\n  return data\r\n}\r\n\r\nconst getProductGradesRequest = async(payload) => {\r\n  const data = await api.get(`/products/specificGrades/${payload.payload}`)\r\n  return data\r\n}\r\n\r\nconst getProductGradeDataRequest = async(payload) => {\r\n  const exteriorData = await api.get(`/products/specificVariantExterior/${payload.payload}`)\r\n  const interiorData = await api.get(`/products/specificVariantInterior/${payload.payload}`)\r\n  const accessoriesData = await api.get(`/products/specificGradeProductOption/${payload.payload}`)\r\n  const data = {\r\n    exteriorData: exteriorData,\r\n    interiorData: interiorData,\r\n    accessoriesData: accessoriesData\r\n  }\r\n  return data\r\n}\r\n\r\n//=========================\r\n// CALL(GENERATOR) ACTIONS\r\n//=========================\r\nfunction* getProductModelData(e) {\r\n  try {\r\n    const data = yield call(getProductModelDataRequest, e)\r\n    yield put(actions.getProductModelDataSuccess(data))\r\n  } catch (error) {\r\n    yield put(actions.getProductModelDataFailure(data))\r\n    console.log(\"Error!\")\r\n  }\r\n}\r\n\r\nfunction* getProductGrades(e) {\r\n  try {\r\n    const data = yield call(getProductGradesRequest, e)\r\n    yield put(actions.getProductGradesSuccess(data))\r\n  } catch (error) {\r\n    yield put(actions.getProductGradesFailure(data))\r\n    console.log(\"Error!\")\r\n  }\r\n}\r\n\r\nfunction* getProductGradeData(e) {\r\n  try {\r\n    const data = yield call(getProductGradeDataRequest, e)\r\n    yield put(actions.getProductGradeDataSuccess(data))\r\n  } catch (error) {\r\n    yield put(actions.getProductGradeDataFailure(data))\r\n    console.log(\"Error!\")\r\n  }\r\n}\r\n\r\n//=======================\r\n// WATCHER FUNCTIONS\r\n//=======================\r\nexport function* getProductModelDataWatcher() {\r\n  yield takeEvery(types.GET_PRODUCT_MODEL_DATA, getProductModelData)\r\n}\r\n\r\nexport function* getProductGradesWatcher() {\r\n  yield takeEvery(types.GET_PRODUCT_GRADES, getProductGrades)\r\n}\r\n\r\nexport function* getProductGradeDataWatcher() {\r\n  yield takeEvery(types.GET_PRODUCT_GRADE_DATA, getProductGradeData)\r\n}\r\n\r\n//=======================\r\n// FORK SAGAS TO STORE\r\n//=======================\r\nexport default function* productSaga() {\r\n  yield all([\r\n    fork(getProductModelDataWatcher),\r\n    fork(getProductGradesWatcher),\r\n    fork(getProductGradeDataWatcher),\r\n  ])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}